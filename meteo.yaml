substitutions:
  devicename: meteo
  board: nodemcu-32s
  static_ip: 192.168.178.226

packages:
  device_base: !include .basicesp32.yaml
  wifi: !include .wifi.yaml 
  
#web_server:
#  port: 80

### =========================
### Bluetooth to wifi gateway
### =========================
esp32_ble_tracker:
  max_connections: 3
  scan_parameters: 
    active: false #solo se si usano i Mi Flora
    interval: 320ms #valori di default da usare per stabilità wifi
    window: 30ms #valori di default da usare per stabilità wifi
    #software_coexistence: true
  id: esp32blehub 

### ===============
### Bluetooth proxy
### ===============
bluetooth_proxy:
  active: true
  cache_services: true
  connection_slots: 3  

i2c:
  - id: bus_a
    sda:
      number: 21
    scl:
      number: 22
    frequency: 400khz
    scan: true
  - id: bus_b
    sda:
      number: 13
    scl:
      number: 16
    frequency: 400khz
    scan: true

text_sensor:
  - platform: template
    name: "direzione del vento"
    icon: 'mdi:windsock'
    id: wind_dir_card

  - platform: template
    name: 'tipo di vento'
    icon: 'mdi:tailwind'
    id: wind_scale
    update_interval: never      

binary_sensor:

### ===============
### Sensore Pioggia
### ===============

  - platform: gpio
    pin:
      number: GPIO19
      mode:
        input: true
        pullup: true
      inverted: true 
    id: sensore_pioggia
    name: sensore pioggia      
    
sensor:

### ==================
###  sensori Mi Flora
### ==================

  - platform: xiaomi_hhccjcy01
    mac_address: 5C:85:7E:13:90:3A
    temperature:
      name: "ortensie temperatura"
    moisture:
      name: "ortensie umidità"
    illuminance:
      name: "ortensie illuminazione"
    conductivity:
      name: "ortensie fertilità"
    battery_level:
      name: "ortensie batteria"

  - platform: xiaomi_hhccjcy01
    mac_address: 5C:85:7E:13:8C:EC
    temperature:
      name: "acero temperatura"
    moisture:
      name: "acero umidità"
    illuminance:
      name: "acero illuminazione"
    conductivity:
      name: "acero fertilità"
    battery_level:
      name: "acero batteria"

### ===========================================================  
### sensore ms5611 per temperatura ESP e pressione atmosferica
### ===========================================================

  - platform: ms5611
    i2c_id: bus_b 
    temperature:
      name: "temp hardware"
      id: temp_device
    pressure:
      name: "Pressione"
      id: pressure
    address: 0x77
    update_interval: 120s  

### ======================================
### anemometro settato in Km/h pulse_meter
### ======================================

### velocità istantanea
  - platform: pulse_meter
    pin:
      number: GPIO26
      mode:
        input: true
        pullup: true  
    unit_of_measurement: 'km/h'
    name: "velocità vento istantanea"
    icon: 'mdi:weather-windy'
    device_class: wind_speed  
    state_class: measurement
    accuracy_decimals: 1
    id: my_wind_kmh    
    internal_filter: 10 ms
    filters:
    #- multiply: 1.224 
    - multiply: 0.04
    - debounce: 0.1s

# Velocità media su 2 minuti (moving average)
  - platform: copy
    source_id: my_wind_kmh
    name: "velocità vento media (2 min)"
    unit_of_measurement: "km/h"
    icon: 'mdi:weather-windy-variant'
    accuracy_decimals: 1
    filters:
      - sliding_window_moving_average:
          window_size: 60  # 2 minuti con update_interval: 2s
          send_every: 10   # ogni 20 secondi invia un valore aggiornato

# Raffica massima (ultimi 10s)
  - platform: copy
    source_id: my_wind_kmh
    name: "raffica di vento (ultimi 10s)"
    icon: 'mdi:speedometer'
    unit_of_measurement: "km/h"
    accuracy_decimals: 1
    filters:
      - max:
          window_size: 5  # aggiorna ogni 10s

### Scala di Beaufort per il tipo di vento    
  - platform: template
    #name: 'Windspeed' 
    icon: 'mdi:weather-windy'
    id: wind_meter_avg
    lambda: return id(my_wind_kmh).state;
    unit_of_measurement: 'km/h'
    update_interval: 10s
    filters:
      - throttle_average: 10s
    on_value:
      lambda: |-
       if (id(wind_meter_avg).state < 1) {
         id(wind_scale).publish_state("aria calma");
       } else if (id(wind_meter_avg).state > 0 && id(wind_meter_avg).state < 4) {
         id(wind_scale).publish_state("aria leggera");
       } else if (id(wind_meter_avg).state > 3 && id(wind_meter_avg).state < 8) {
         id(wind_scale).publish_state("brezza leggera");
       } else if (id(wind_meter_avg).state > 7 && id(wind_meter_avg).state < 13) {
         id(wind_scale).publish_state("brezza gentile");
       } else if (id(wind_meter_avg).state > 12 && id(wind_meter_avg).state < 19) {
         id(wind_scale).publish_state("brezza moderata");
       } else if (id(wind_meter_avg).state > 18 && id(wind_meter_avg).state < 25) {
         id(wind_scale).publish_state("brezza fresca");
       } else if (id(wind_meter_avg).state > 24 && id(wind_meter_avg).state < 32) {
         id(wind_scale).publish_state("brezza forte");
       } else if (id(wind_meter_avg).state > 31 && id(wind_meter_avg).state < 39) {
         id(wind_scale).publish_state("quasi burrasca");
       } else if (id(wind_meter_avg).state > 38 && id(wind_meter_avg).state < 47) {
         id(wind_scale).publish_state("burrasca");
       } else if (id(wind_meter_avg).state > 46 && id(wind_meter_avg).state < 55) {
         id(wind_scale).publish_state("burrasca forte");
       } else if (id(wind_meter_avg).state > 54 && id(wind_meter_avg).state < 64) {
         id(wind_scale).publish_state("tempesta");
       } else if (id(wind_meter_avg).state > 63 && id(wind_meter_avg).state < 73) {
         id(wind_scale).publish_state("tempesta violenta");
       } else if (id(wind_meter_avg).state > 72) {
         id(wind_scale).publish_state("uragano");
       } else {
         id(wind_scale).publish_state("");
       }    
### ===========================
### sensore direzione del vento
### ===========================

  - platform: adc
    id: adc_sensor
    pin: 
      number: GPIO32
    name: ADC
    internal: true
    update_interval: 120s
    filters:
      # - multiply: 3.3 ### settaggio per il Wemos D1 che non legge valori > 1.0V
      # - multiply: 0.0009775171 ### risultato di 1/1023 per avere il valore analogico da 0 a 1024
    accuracy_decimals: 3 ### IMPORTANT to get resolution for resistance sensor
    
#### Direzione cardinale
#### settare i valori in base all'installazione! mettere la punta a nord tra 3100 e 3200 ohm
## Direzione -- Resistenza -- ADC Voltaggio
## N -- 3132Ω -- 0.79v
## NE -- 1643Ω -- 0.47v
## E -- 292Ω -- 0.10v
## SE -- 602Ω -- 0.19v
## S -- 974Ω -- 0.29v
## SW -- 2372Ω -- 0.63v
## W -- 3997Ω -- 0.94v
## NW -- 3657Ω -- 0.88v
  - platform: resistance
    sensor: adc_sensor
    id: resistance_sensor
    configuration: DOWNSTREAM
    resistor: 10kOhm
    internal: true    
    name: Resistance Sensor
    accuracy_decimals: 1
    filters:
      - heartbeat: 120s ### legge il sensore ogni 2 minuti e invia il valore che trova allo scadere del secondo minuto 
    on_value:
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 3100
              below: 3200
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "Nord"
            - sensor.template.publish:
                id: wind_heading
                state: 0.0
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 1600
              below: 1700
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "Nord-Est"         
            - sensor.template.publish:
                id: wind_heading
                state: 45.0            
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 250
              below: 350
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "Est"                
            - sensor.template.publish:
                id: wind_heading
                state: 90.0          
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 550
              below: 650
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "Sud-Est"    
            - sensor.template.publish:
                id: wind_heading
                state: 135.0             
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 900
              below: 1100
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "Sud"    
            - sensor.template.publish:
                id: wind_heading
                state: 180.0            
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 2300
              below: 2450
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "Sud-Ovest"    
            - sensor.template.publish:
                id: wind_heading
                state: 225.0              
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 3900
              below: 4100
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "Ovest"    
            - sensor.template.publish:
                id: wind_heading
                state: 270.0          
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor
              above: 3500
              below: 3800
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "Nord-Ovest"    
            - sensor.template.publish:
                id: wind_heading
                state: 315.0

  - platform: template
    name: "Wind Heading"
    id: wind_heading
    unit_of_measurement: "°"
    internal: true

### ====================================
### sensore temperatura ed umidità DHT22
### ====================================

  - platform: dht
    pin: 
      number: GPIO27 
      #inverted: true
      mode:
        input: true
        pullup: true
    temperature:
      name: "temperatura esterna"
      id: temp_out
    humidity:
      name: "umidita esterna"
      id: humidity
    update_interval: 120s
    #model: DHT22

### ===================
### sensore pluviometro
### ===================

### sensore quantità pioggia istantanea come pulse counter          
  - platform: pulse_counter
    pin: 
      number: GPIO17
      mode:
        input: true
        pullup: true
    name: 'quantità pioggia'
    icon: 'mdi:weather-rainy'
    id: my_rain
    update_interval: 60s
    unit_of_measurement: 'mm/min'
    accuracy_decimals: 2
    filters:
      - multiply: 0.2794
    on_value:
      then:
        - lambda: |-
            // Aggiungi la pioggia di questo minuto al totale giornaliero
            id(daily_rain_total) += (x / 60.0);  

### integrazione per calcolare la pioggia caduta nell'ultima ora
  - platform: integration
    name: "pioggia ultima ora"
    sensor: my_rain
    #id: rain_per_hour
    time_unit: h
    unit_of_measurement: 'mm'
    icon: 'mdi:weather-rainy'
    accuracy_decimals: 2

### contatore per calcolare la pioggia caduta nelle ultime 24 ore (0-24) 
  - platform: template
    name: "pioggia giornaliera"
    id: rain_daily
    unit_of_measurement: 'mm'
    accuracy_decimals: 2
    icon: 'mdi:weather-pouring'
    update_interval: 60s
    lambda: |-
      id(daily_rain_total) += id(my_rain).state / 60.0;
      return id(daily_rain_total);

### azzerare il contatore giornaliero a mezzanotte
globals:
  - id: daily_rain_total
    type: float
    restore_value: no
    initial_value: '0'  

time:
  - platform: sntp
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: |-
               id(daily_rain_total) = 0;          

### ========================
### gestione display ssd1306
### ========================

font:
   ### font scaricati in locale
  - file: "fonts/16021_FUTURAMC.ttf"
    id: futura_font
    size: 20

  ### font Google online, gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto
    size: 20

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    i2c_id: bus_a
    address: 0x3C
    update_interval: 5s
    lambda: |-
      it.printf(5,  0, id(futura_font), "esp: %.1f °C", id(temp_esp).state);
      it.printf(5, 20, id(futura_font), "in: %.1f °C", id(temp_device).state);
      it.printf(5, 40, id(futura_font), "out: %.1f °C", id(temp_out).state);

